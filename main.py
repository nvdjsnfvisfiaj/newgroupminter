import logging
import re
import asyncio
from telethon import TelegramClient, events
from telethon.tl.types import PeerChannel

# –£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
API_ID = 23476633  # –í–∞—à API ID, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å https://my.telegram.org
API_HASH = "4c10db1a2898cd4d95157e48d37f758c"  # –í–∞—à API Hash, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å https://my.telegram.org

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ID –¥–ª—è –≥—Ä—É–ø–ø
SOURCE_GROUP_ID = -1002459101321  # ID –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã
DESTINATION_GROUP_ID = -1002680292174  # ID —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–ª–æ–≤ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö ID —Ç–æ–ø–∏–∫–æ–≤
WORD_TO_TOPIC_ID = {
    "B-Day Candle": 227,
    "Desk Calendar": 224,
    "Homemade Cake": 221,
    "Sakura Flower": 218,
    "Lol Pop": 215,
    "Spy Agaric": 212,
    "Eternal Candle": 209,
    "Witch Hat": 206,
    "Scared Cat": 203,
    "Voodoo Doll": 200,
    "Flying Broom": 197,
    "Crystall Ball": 194,
    "Skull Flower": 191,
    "Trapped Heart": 188,
    "Mad Pumpkin": 185,
    "Sharp Tongue": 182,
    "Ion Gem": 179,
    "Evil Eye": 176,
    "Hex Pot": 173,
    "Hypno Lollipop": 170,
    "Kissed Frog": 167,
    "Electric Skull": 164,
    "Magic Potion": 161,
    "Record Player": 158,
    "Vintage Cigar": 155,
    "Berry Box": 152,
    "Eternal Rose": 149,
    "Mini Oscar": 146,
    "Perfume Bottle": 143,
    "Love Candle": 140,
    "Durov's Cap": 137,
    "Hanging Star": 134,
    "Jelly Bunny": 131,
    "Spiced Wine": 127,
    "Plush Pepe": 124,
    "Precious Peach": 121,
    "Astral Shard": 118,
    "Genie Lamp": 115,
    "Signet Ring": 112,
    "Swiss Watch": 109,
    "Bunny Muffin": 106,
    "Star Notepad": 103,
    "Jester Hat": 100,
    "Sleigh Bell": 97,
    "Snow Mittens": 94,
    "Snow Globe": 91,
    "Santa Hat": 88,
    "Winter Wreath": 85,
    "Ginger Cookie": 82,
    "Jingle Bells": 79,
    "Party Sparkler": 76,
    "Cookie Heart": 73,
    "Candy Cane": 69,
    "Tama Gadget": 66,
    "Lunar Snake": 63,
    "Loot Bag": 60,
    "Diamond Ring": 57,
    "Toy Bear": 54,
    "Love Potion": 51,
    "Top Hat": 48,
    "Neko Helmet": 45,
    "Jack-in-the-Box": 404,
    "Easter Egg": 5993
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = None

def generate_link(word, number):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://t.me/nft/—Å–ª–æ–≤–æ-–Ω–æ–º–µ—Ä,
    –≥–¥–µ –ø—Ä–æ–±–µ–ª—ã –≤ —Å–ª–æ–≤–µ —É–¥–∞–ª—è—é—Ç—Å—è.
    """
    base_url = "https://t.me/nft/"
    cleaned_word = word.replace(" ", "")  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Å–ª–æ–≤–∞
    return f"{base_url}{cleaned_word}-{number}"

def add_link_to_message(message):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –≤ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.
    """
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ "—Å–ª–æ–≤–∞" –∏ "–Ω–æ–º–µ—Ä–∞" –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    match = re.search(r"^(üÜï )?(?P<word>[A-Za-z\s]+) #(?P<number>\d+)", message)
    if match:
        word = match.group("word").strip()
        number = match.group("number").strip()
        link = generate_link(word, number)
        # –§–æ—Ä–º–∏—Ä—É–µ–º Markdown-—Å—Å—ã–ª–∫—É
        linked_word = f"[{word}]({link})"
        # –ó–∞–º–µ–Ω—è–µ–º —Å–ª–æ–≤–æ –Ω–∞ —Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        return message.replace(word, linked_word, 1)
    return message  # –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


async def handle_messages(event):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∏—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø–∏–∫ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã
        if event.chat_id == SOURCE_GROUP_ID:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            for word, topic_id in WORD_TO_TOPIC_ID.items():
                if word in event.message.message:
                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏ ID —Ç–æ–ø–∏–∫–∞
                    logging.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ: '{word}', –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ —Ç–æ–ø–∏–∫ ID: {topic_id}")

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    updated_message = add_link_to_message(event.message.message)

                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø–∏–∫
                    await client.send_message(
                        entity=PeerChannel(DESTINATION_GROUP_ID),
                        message=updated_message,
                        parse_mode="md",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        reply_to=topic_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply_to –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞
                    )
                    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —Ç–æ–ø–∏–∫ ID: {topic_id}")
                    return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥—É–±–ª–∏
            logging.warning("–°–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def restart_client():
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ Telegram –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã.
    """
    global client
    while True:
        try:
            logging.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Telegram...")

            if client is not None:
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∫–ª–∏–µ–Ω—Ç–∞
                await client.disconnect()
                logging.info("–°—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
            client = TelegramClient("user_account", API_ID, API_HASH)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            client.add_event_handler(handle_messages, events.NewMessage)

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            await client.start()
            logging.info("–ö–ª–∏–µ–Ω—Ç Telegram —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
        
        except Exception as e:
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        
        await asyncio.sleep(3600)  # –ñ–¥—ë–º 3 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º


async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Telegram...")
    await restart_client()


if __name__ == "__main__":
    asyncio.run(main())